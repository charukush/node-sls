service: node-sls
custom:
  serverless-offline:
    useChildProcesses: true

provider:
  name: aws
  runtime: nodejs12.x
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-east-1:*:*'  

plugins:
  - serverless-offline
  
functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  contentAdd:
    handler: content.contentAdded
    events:
      - http:
          path: content
          method: put 
  contentList:
    handler: content.contentDisplay
    events:
      - http:
          path: content
          method: get     
  contentDelete:
    handler: content.contentDelete
    events:
      - http:
          path: content/{id}
          method: delete
          request: 
            parameters: 
              paths: 
                id: true   
  contentUpdate:
    handler: content.contentUpdate
    events:
      - http:
          path: content
          method: post
  contentListId:
    handler: content.contentID
    events:
      - http:
          path: content/{id}
          method: get            
          

          
                          

resources: # CloudFormation template syntax from here on.
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: content
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
